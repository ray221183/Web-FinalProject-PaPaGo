type Query {
	user(data: UserInput!): UserOutput!
	post(data: findPostInput!): postOutput!
	greatOfpost(data: findGreatInput!): findGreatOutput!
	greatOfuser(data: greatOfuserInput!): GreatOfuserOutput!
}

type Mutation {
	addUser(data: registerInput!): String!
	addPost(data: postInput!):String!
	deletePost(data: uuidInput!):String!
	updatePost(data: updatePostInput!): updatePostOutput!
	updateGreat(data: updateGreatInput!): String!
}



input registerInput{
	first_name: String!
	last_name: String!
	name: String!
	account: String!
	password: String!
}
input UserInput {
	account: String!
	password: String!
}
input uuidInput {
	uuid: String!
}


input findPostInput {
	writer: String!
	reader: String!
	get_sketch: Boolean!
	get_non_sketch: Boolean!
	keyword:    String!
	uuid:       String
}

input findGreatInput {
	uuid: String!
}

input postInput{
	content:    String!
	writer:     String!
	tags:       [String]!
	date:       String!
	is_sketch:  Boolean!   
}

input greatOfuserInput{
	account: String!
}

input updatePostInput{
	uuid:    String!
	content: String!
	tags:    [String]!
	date:    String!
	is_sketch: Boolean!
}

input updateGreatInput{
	uuid: String!
	account: String!
	is_push: Boolean!
}

type post{
	content:    String!
	tags:       [String]!
	name:       String!
	date:       String!
	writer:     String!
	is_sketch:  Boolean!
	uuid:       String!
	great_num:  Int!
}


type GreatOfuserOutput {
	posts: [post]!
}

type updatePostOutput{
	content:    String!
	tags:       [String]!
	name:       String!
	date:       String!
	writer:     String!
	is_sketch:  Boolean!
	uuid:       String!
}

type user_name {
	account: String!
	name: String!
}
type postOutput{
	posts: [post]!
}

type findGreatOutput {
	users: [user_name]!
}

type UserOutput {
	first_name: String!
	last_name: String!
	name: String!
	account: String!
	password: String!
	valid: Boolean!
}


enum MutationType {
	CREATED
	UPDATED
	DELETED
	ADD
}

